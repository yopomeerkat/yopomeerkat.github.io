{"version":3,"file":"static/webpack/static/development/pages/index.js.1c644c96d01ffddb422a.hot-update.js","sources":["webpack:///./components/w3.js"],"sourcesContent":["import YopoInvest from \"./contracts/YopoInvest.json\";\nimport config from \"./config\";\nimport Web3 from \"web3\";\n\nconst getWeb3 = () => {\n\ttry {\n\t\tlet { web3 } = window;\n\t\tconst alreadyInjected = typeof web3 !== `undefined`; // i.e. Mist/Metamask\n\n\t\tif (alreadyInjected) {\n\t\t\tweb3 = new Web3(web3.currentProvider);\n\t\t\ttry {\n\t\t\t\tweb3.eth.net.getNetworkType().then(networkId => {\n\t\t\t\t\tconfig.setNetwork(\n\t\t\t\t\t\tnetworkId == \"3\" || networkId == \"ropsten\"\n\t\t\t\t\t\t\t? \"test\"\n\t\t\t\t\t\t\t: \"main\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"----------------error:getNetworkType-----------------\"\n\t\t\t\t);\n\t\t\t\tconsole.log(ex);\n\t\t\t}\n\n\t\t\t//console.log(`Injected web3 detected.`);\n\t\t} else {\n\t\t\tconst network = config.network() == \"test\" ? \"ropsten\" : \"mainnet\";\n\t\t\tconst provider = new Web3.providers.HttpProvider(\n\t\t\t\t`https://${network}.infura.io/v3/0f85ce37bcb04ac582ba1475077d1019`\n\t\t\t);\n\t\t\tweb3 = new Web3(provider);\n\t\t\tconsole.log(`No web3 instance injected, using Local web3.`);\n\t\t}\n\t\t//console.log(web3);\n\n\t\tconst gameFactoryAddress = config.address();\n\t\t//console.log(gameFactoryAddress);\n\t\tconst contract = new web3.eth.Contract(\n\t\t\tYopoInvest.abi || YopoInvest,\n\t\t\tgameFactoryAddress\n\t\t);\n\t\t//console.log(contract);\n\n\t\treturn { web3, contract };\n\t} catch (error) {\n\t\tconsole.log(\"----------------error-----------------\");\n\t\tconsole.log(error);\n\t}\n};\n\nconst getFactoryContract = address => {\n\treturn getWeb3();\n};\n\nexport const factoryContract = () => {\n\treturn getFactoryContract();\n};\n\nexport const gameContract = address => {\n\tlet { web3 } = getWeb3();\n\tlet contract = new web3.eth.Contract(YopoInvest.abi || YopoInvest, address);\n\tcontract.web3 = web3;\n\treturn contract;\n};\n\nexport const getAccount = async () => {\n\tlet { web3 } = getWeb3();\n\tconst accounts = await web3.eth.getAccounts();\n\treturn accounts[0];\n};\n\nexport default getWeb3;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}